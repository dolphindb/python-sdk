from enum import Enum

FORM_NUM = 9
# DATA FORM
DF_SCALAR = 0
DF_VECTOR = 1
DF_PAIR = 2
DF_MATRIX = 3
DF_SET = 4
DF_DICTIONARY = 5
DF_TABLE = 6
DF_CHART = 7
DF_CHUNK = 8

# DATA_TYPE
TYPE_NUM = 71
DT_VOID = 0
DT_BOOL = 1
DT_BYTE = 2
DT_CHAR = 2
DT_SHORT = 3
DT_INT = 4
DT_LONG = 5
DT_DATE = 6
DT_MONTH = 7
DT_TIME = 8
DT_MINUTE = 9
DT_SECOND = 10
DT_DATETIME = 11
DT_TIMESTAMP = 12
DT_NANOTIME = 13
DT_NANOTIMESTAMP = 14
DT_FLOAT = 15
DT_DOUBLE = 16
DT_SYMBOL = 17
DT_STRING = 18
DT_UUID = 19
DT_FUNCTIONDEF = 20
DT_HANDLE = 21
DT_CODE = 22
DT_DATASOURCE = 23
DT_RESOURCE = 24
DT_ANY = 25
DT_COMPRESS = 26
DT_DICTIONARY = 27
DT_DATEHOUR = 28
DT_DATEMINUTE = 29
DT_IPPADDR = 30
DT_IPADDR = 30
DT_INT128 = 31
DT_BLOB = 32
DT_DECIMAL = 33
DT_DECIMAL32 = 37
DT_DECIMAL64 = 38
DT_DECIMAL128 = 39
DT_OBJECT = 40

DT_VOID_ARRAY = 64
ARRAY_TYPE_BASE = 64
DT_BOOL_ARRAY = 65
DT_BYTE_ARRAY = 66
DT_CHAR_ARRAY = 66
DT_SHORT_ARRAY = 67
DT_INT_ARRAY = 68
DT_LONG_ARRAY = 69
DT_DATE_ARRAY = 70
DT_MONTH_ARRAY = 71
DT_TIME_ARRAY = 72
DT_MINUTE_ARRAY = 73
DT_SECOND_ARRAY = 74
DT_DATETIME_ARRAY = 75
DT_TIMESTAMP_ARRAY = 76
DT_NANOTIME_ARRAY = 77
DT_NANOTIMESTAMP_ARRAY = 78
DT_FLOAT_ARRAY = 79
DT_DOUBLE_ARRAY = 80
DT_SYMBOL_ARRAY = 81
DT_STRING_ARRAY = 82
DT_UUID_ARRAY = 83
DT_FUNCTIONDEF_ARRAY = 84
DT_HANDLE_ARRAY = 85
DT_CODE_ARRAY = 86
DT_DATASOURCE_ARRAY = 87
DT_RESOURCE_ARRAY = 88
DT_ANY_ARRAY = 89
DT_COMPRESS_ARRAY = 90
DT_DICTIONARY_ARRAY = 91
DT_DATEHOUR_ARRAY = 92
DT_DATEMINUTE_ARRAY = 93
DT_IPPADDR_ARRAY = 94
DT_IPADDR_ARRAY = 94
DT_INT128_ARRAY = 95
DT_BLOB_ARRAY = 96
DT_DECIMAL32_ARRAY = 101
DT_DECIMAL64_ARRAY = 102
DT_DECIMAL128_ARRAY = 103

# Data type size
DATA_SIZE = dict()
DATA_SIZE[DT_VOID] = 0
DATA_SIZE[DT_BOOL] = 1
DATA_SIZE[DT_BYTE] = 1
DATA_SIZE[DT_SHORT] = 2
DATA_SIZE[DT_INT] = 4
DATA_SIZE[DT_LONG] = 8
DATA_SIZE[DT_DATE] = 4
DATA_SIZE[DT_MONTH] = 4
DATA_SIZE[DT_TIME] = 4
DATA_SIZE[DT_MINUTE] = 4
DATA_SIZE[DT_SECOND] = 4
DATA_SIZE[DT_DATETIME] = 4
DATA_SIZE[DT_TIMESTAMP] = 8
DATA_SIZE[DT_NANOTIME] = 8
DATA_SIZE[DT_NANOTIMESTAMP] = 8
DATA_SIZE[DT_FLOAT] = 4
DATA_SIZE[DT_DOUBLE] = 8
DATA_SIZE[DT_SYMBOL] = 4
DATA_SIZE[DT_STRING] = 0
DATA_SIZE[DT_UUID] = 16
DATA_SIZE[DT_ANY] = 0
DATA_SIZE[DT_DICTIONARY] = 0
DATA_SIZE[DT_OBJECT] = 0
DATA_SIZE[DT_IPADDR] = 16
DATA_SIZE[DT_INT128] = 16
DATA_SIZE[DT_BLOB] = 0

DBNAN = dict()
DBNAN[DT_BYTE] = -128
DBNAN[DT_BOOL] = -128
DBNAN[DT_SHORT] = -32768
DBNAN[DT_INT] = -2147483648
DBNAN[DT_LONG] = -9223372036854775808
DBNAN[DT_FLOAT] = -3.4028234663852886e+38
DBNAN[DT_DOUBLE] = -1.7976931348623157e+308
DBNAN[DT_SYMBOL] = ''
DBNAN[DT_STRING] = ''
DBNAN[DT_DATE] = -2147483648
DBNAN[DT_MONTH] = -2147483648
DBNAN[DT_TIME] = -2147483648
DBNAN[DT_MINUTE] = -2147483648
DBNAN[DT_SECOND] = -2147483648
DBNAN[DT_DATETIME] = -2147483648
DBNAN[DT_TIMESTAMP] = -9223372036854775808
DBNAN[DT_NANOTIME] = -9223372036854775808
DBNAN[DT_NANOTIMESTAMP] = -9223372036854775808
DBNAN[DT_UUID]=0
DBNAN[DT_INT128]=0
DBNAN[DT_IPADDR]=0


# partition Schema
SEQ = 0
VALUE = 1
RANGE = 2
LIST = 3
COMPO = 4
HASH = 5

# VERBOSE
VERBOSE = False


def set_verbose(verbose=False):
    global VERBOSE
    VERBOSE = verbose


def get_verbose():
    return VERBOSE


# Protocol
PROTOCOL_DEFAULT = 0
PROTOCOL_DDB = 1
PROTOCOL_PICKLE = 2
PROTOCOL_ARROW = 3

# OTHER Settings
DDB_EPSILON = 1e-5


class DATA_CATEGORY(Enum):
    NOTHING = 0
    LOGICAL = 1
    INTEGRAL = 2
    FLOATING = 3
    TEMPORAL = 4
    LITERAL = 5
    SYSTEM = 6
    MIXED = 7
    BINARY = 8
    COMPLEX = 9
    ARRAY = 10
    DENARY = 11


def getCategory(data_type):
    if data_type in [
        DT_TIME, DT_SECOND, DT_MINUTE, DT_DATE,
        DT_DATEHOUR, DT_DATEMINUTE, DT_DATETIME, DT_MONTH,
        DT_NANOTIME, DT_NANOTIMESTAMP, DT_TIMESTAMP,
    ]:
        return DATA_CATEGORY.TEMPORAL
    elif data_type in [DT_INT, DT_LONG, DT_SHORT, DT_CHAR]:
        return DATA_CATEGORY.INTEGRAL
    elif data_type in [DT_BOOL]:
        return DATA_CATEGORY.LOGICAL
    elif data_type in [DT_DOUBLE, DT_FLOAT]:
        return DATA_CATEGORY.FLOATING
    elif data_type in [DT_STRING, DT_SYMBOL]:
        return DATA_CATEGORY.LITERAL
    elif data_type in [DT_INT128, DT_UUID, DT_IPADDR, DT_BLOB]:
        return DATA_CATEGORY.BINARY
    elif data_type in [DT_ANY]:
        return DATA_CATEGORY.MIXED
    elif data_type in [DT_VOID]:
        return DATA_CATEGORY.NOTHING
    elif data_type in [DT_DECIMAL32, DT_DECIMAL64, DT_DECIMAL128]:
        return DATA_CATEGORY.DENARY
    elif data_type >= ARRAY_TYPE_BASE:
        return DATA_CATEGORY.ARRAY
    else:
        return DATA_CATEGORY.SYSTEM
